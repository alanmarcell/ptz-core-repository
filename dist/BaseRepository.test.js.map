{"version":3,"sources":["../dist-esnext/BaseRepository.test.js"],"names":["MONGO_URL","baseRepository","describe","beforeEach","it","entity","id","save","getById","entityDb","newName","only","query","email","find","limit","i","testLimit","entitiesDb","length","entities","push","getByIds"],"mappings":";;AAAA;;AACA;;;;AACA,IAAMA,YAAY,yCAAlB;AACA,IAAIC,cAAJ;AACAC,SAAS,gBAAT,EAA2B,YAAM;AAC7BC,yDAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACgB,6BAAiB,iBAAjB,EAAoCH,SAApC,CADhB;;AAAA;AACPC,sCADO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;AAGAC,aAAS,MAAT,EAAiB,YAAM;AACnBE,WAAG,QAAH,4CAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AACHC,kCADG,GACM;AACXC,oCAAI;AADO,6BADN;AAAA;AAAA,mCAIHL,eAAeM,IAAf,CAAoBF,MAApB,CAJG;;AAAA;AAAA;AAAA,mCAKcJ,eAAeO,OAAf,CAAuBH,OAAOC,EAA9B,CALd;;AAAA;AAKHG,oCALG;;AAMT,+CAAGA,QAAH;AACA,kDAAMA,SAASH,EAAf,EAAmBD,OAAOC,EAA1B;;AAPS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;AASAF,WAAG,QAAH,4CAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AACHC,kCADG,GACM;AACXC,oCAAI;AADO,6BADN;;AAITD,mCAAO,MAAP,IAAiB,OAAjB;AAJS;AAAA,mCAKHJ,eAAeM,IAAf,CAAoBF,MAApB,CALG;;AAAA;AAMHK,mCANG,GAMO,QANP;;AAOTL,mCAAO,MAAP,IAAiBK,OAAjB;AAPS;AAAA,mCAQHT,eAAeM,IAAf,CAAoBF,MAApB,CARG;;AAAA;AAAA;AAAA,mCAScJ,eAAeO,OAAf,CAAuBH,OAAOC,EAA9B,CATd;;AAAA;AASHG,oCATG;;AAUT,+CAAGA,QAAH;AACA,kDAAMA,SAASH,EAAf,EAAmBD,OAAOC,EAA1B;AACA,kDAAMG,SAAS,MAAT,CAAN,EAAwBC,OAAxB;;AAZS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;AAcH,KAxBD;AAyBAR,aAASS,IAAT,CAAc,MAAd,EAAsB,YAAM;AACxBP,WAAG,UAAH,4CAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,kCADK,GACI;AACXC,oCAAI;AADO,6BADJ;;AAIXD,mCAAO,OAAP,IAAkB,uBAAlB;AAJW;AAAA,mCAKLJ,eAAeM,IAAf,CAAoBF,MAApB,CALK;;AAAA;AAMLO,iCANK,GAMG;AACVC,uCAAOR,OAAO,OAAP;AADG,6BANH;AAAA;AAAA,mCASYJ,eAAea,IAAf,CAAoBF,KAApB,EAA2B,EAAEG,OAAO,CAAT,EAA3B,CATZ;;AAAA;AASLN,oCATK;;AAUX,+CAAGA,SAAS,CAAT,CAAH;AACA,kDAAMA,SAAS,CAAT,EAAY,OAAZ,CAAN,EAA4BJ,OAAO,OAAP,CAA5B;;AAXW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;AAaAD,WAAG,YAAH,4CAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AACJY,6BADI,GACA,CADA;;AAAA;AAAA,kCACGA,KAAK,CADR;AAAA;AAAA;AAAA;;AAEHX,kCAFG,GAEM;AACXC,oCAAI,SAASU;AADF,6BAFN;;AAKTX,mCAAO,WAAP,IAAsB,IAAtB;AACAA,mCAAO,GAAP,IAAcW,CAAd;AANS;AAAA,mCAOHf,eAAeM,IAAf,CAAoBF,MAApB,CAPG;;AAAA;AACWW,+BADX;AAAA;AAAA;;AAAA;AASPJ,iCATO,GASC;AACVK,2CAAW;AADD,6BATD;AAAA;AAAA,mCAYYhB,eAAea,IAAf,CAAoBF,KAApB,EAA2B,EAAEG,OAAO,CAAT,EAA3B,CAZZ;;AAAA;AAYPG,sCAZO;;AAab,kDAAMA,WAAWC,MAAjB,EAAyB,CAAzB;;AAba;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjB;AAeH,KA7BD;AA8BAjB,aAAS,UAAT,EAAqB,YAAM;AACvBE,WAAG,uBAAH,4CAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBgB,oCADkB,GACP,EADO;AAEfJ,6BAFe,GAEX,CAFW;;AAAA;AAAA,kCAERA,KAAK,CAFG;AAAA;AAAA;AAAA;;AAGdX,kCAHc,GAGL;AACXC,oCAAI,SAASU;AADF,6BAHK;;AAMpBX,mCAAO,GAAP,IAAcW,CAAd;AACAI,qCAASC,IAAT,CAAchB,MAAd;AAPoB;AAAA,mCAQdJ,eAAeM,IAAf,CAAoBF,MAApB,CARc;;AAAA;AAEAW,+BAFA;AAAA;AAAA;;AAAA;AAAA;AAAA,mCAUCf,eAAeqB,QAAf,CAAwB,CAC7CF,SAAS,CAAT,EAAYd,EADiC,EAC7Bc,SAAS,CAAT,EAAYd,EADiB,EACbc,SAAS,CAAT,EAAYd,EADC,CAAxB,CAVD;;AAAA;AAUlBY,sCAVkB;;AAaxB,kDAAMA,WAAWC,MAAjB,EAAyB,CAAzB;;AAbwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA5B;AAeH,KAhBD;AAiBH,CA5ED;AA6EA","file":"BaseRepository.test.js","sourcesContent":["import { equal, ok } from 'ptz-assert';\nimport { createRepository } from './index';\nconst MONGO_URL = 'mongodb://localhost:27017/ptz-core-repo';\nvar baseRepository;\ndescribe('BaseRepository', () => {\n    beforeEach(async () => {\n        baseRepository = await createRepository('test-collection', MONGO_URL);\n    });\n    describe('save', () => {\n        it('insert', async () => {\n            const entity = {\n                id: 'testid'\n            };\n            await baseRepository.save(entity);\n            const entityDb = await baseRepository.getById(entity.id);\n            ok(entityDb);\n            equal(entityDb.id, entity.id);\n        });\n        it('update', async () => {\n            const entity = {\n                id: 'testid'\n            };\n            entity['name'] = 'teste';\n            await baseRepository.save(entity);\n            const newName = 'teste2';\n            entity['name'] = newName;\n            await baseRepository.save(entity);\n            const entityDb = await baseRepository.getById(entity.id);\n            ok(entityDb);\n            equal(entityDb.id, entity.id);\n            equal(entityDb['name'], newName);\n        });\n    });\n    describe.only('find', () => {\n        it('by Email', async () => {\n            const entity = {\n                id: 'testid'\n            };\n            entity['email'] = 'angeloocana@gmail.com';\n            await baseRepository.save(entity);\n            const query = {\n                email: entity['email']\n            };\n            const entityDb = await baseRepository.find(query, { limit: 1 });\n            ok(entityDb[0]);\n            equal(entityDb[0]['email'], entity['email']);\n        });\n        it('limit by 3', async () => {\n            for (let i = 0; i <= 6; i++) {\n                const entity = {\n                    id: 'test' + i\n                };\n                entity['testLimit'] = true;\n                entity['i'] = i;\n                await baseRepository.save(entity);\n            }\n            const query = {\n                testLimit: true\n            };\n            const entitiesDb = await baseRepository.find(query, { limit: 3 });\n            equal(entitiesDb.length, 3);\n        });\n    });\n    describe('getByIds', () => {\n        it('get 3 entities by ids', async () => {\n            const entities = [];\n            for (let i = 0; i <= 6; i++) {\n                const entity = {\n                    id: 'test' + i\n                };\n                entity['i'] = i;\n                entities.push(entity);\n                await baseRepository.save(entity);\n            }\n            const entitiesDb = await baseRepository.getByIds([\n                entities[0].id, entities[1].id, entities[2].id\n            ]);\n            equal(entitiesDb.length, 3);\n        });\n    });\n});\n//# sourceMappingURL=BaseRepository.test.js.map"]}
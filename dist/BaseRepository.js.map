{"version":3,"sources":["../dist-esnext/BaseRepository.js"],"names":["getCollection","curry","db","collectionName","collection","save","entity","replaceOne","_id","id","upsert","result","ops","Promise","resolve","getById","query","findOne","getByIds","ids","$in","find","toArray","options"],"mappings":";;;;;;;AAAA;;;;;;;;AACA,IAAMA,gBAAgB,gBAAEC,KAAF,CAAQ,UAACC,EAAD,EAAKC,cAAL;AAAA,WAAwBD,GAAGE,UAAH,CAAcD,cAAd,CAAxB;AAAA,CAAR,CAAtB;AACA,IAAME,OAAO,gBAAEJ,KAAF;AAAA,yDAAQ,iBAAOG,UAAP,EAAmBE,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACIF,WAChBG,UADgB,CACL,EAAEC,KAAKF,OAAOG,EAAd,EADK,EACeH,MADf,EACuB,EAAEI,QAAQ,IAAV,EADvB,CADJ;;AAAA;AACXC,8BADW;;AAGjBL,iCAASK,OAAOC,GAAP,CAAW,CAAX,CAAT;AAHiB,yDAIVC,QAAQC,OAAR,CAAgBR,MAAhB,CAJU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,IAAb;AAMA,IAAMS,UAAU,gBAAEd,KAAF,CAAQ,UAACG,UAAD,EAAaK,EAAb,EAAoB;AACxC,QAAMO,QAAQ;AACVR,aAAKC;AADK,KAAd;AAGA,WAAOL,WACFa,OADE,CACMD,KADN,CAAP;AAEH,CANe,CAAhB;AAOA,IAAME,WAAW,gBAAEjB,KAAF,CAAQ,UAACG,UAAD,EAAae,GAAb,EAAqB;AAC1C,QAAMH,QAAQ;AACVR,aAAK;AACDY,iBAAKD;AADJ;AADK,KAAd;AAKA,WAAOf,WACFiB,IADE,CACGL,KADH,EAEFM,OAFE,EAAP;AAGH,CATgB,CAAjB;AAUA,IAAMD,OAAO,gBAAEpB,KAAF,CAAQ,UAACG,UAAD,EAAaY,KAAb,EAAoBO,OAApB;AAAA,WAAgCnB,WAAWiB,IAAX,CAAgBL,KAAhB,EAAuB,EAAvB,EAA2BO,OAA3B,EAAoCD,OAApC,EAAhC;AAAA,CAAR,CAAb;QACSjB,I,GAAAA,I;QAAMgB,I,GAAAA,I;QAAMrB,a,GAAAA,a;QAAee,O,GAAAA,O;QAASG,Q,GAAAA,Q;AAC7C","file":"BaseRepository.js","sourcesContent":["import R from 'ramda';\nconst getCollection = R.curry((db, collectionName) => db.collection(collectionName));\nconst save = R.curry(async (collection, entity) => {\n    const result = await collection\n        .replaceOne({ _id: entity.id }, entity, { upsert: true });\n    entity = result.ops[0];\n    return Promise.resolve(entity);\n});\nconst getById = R.curry((collection, id) => {\n    const query = {\n        _id: id\n    };\n    return collection\n        .findOne(query);\n});\nconst getByIds = R.curry((collection, ids) => {\n    const query = {\n        _id: {\n            $in: ids\n        }\n    };\n    return collection\n        .find(query)\n        .toArray();\n});\nconst find = R.curry((collection, query, options) => collection.find(query, {}, options).toArray());\nexport { save, find, getCollection, getById, getByIds };\n//# sourceMappingURL=BaseRepository.js.map"]}
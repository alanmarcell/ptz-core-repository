{"version":3,"sources":["../dist-esnext/BaseRepository.js"],"names":["getDbCollection","db","collectionName","collection","save","entity","replaceOne","_id","id","upsert","result","ops","Promise","resolve","getById","query","findOne","getByIds","ids","$in","find","toArray","options"],"mappings":";;;;;;;;AAAA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,EAAD,EAAKC,cAAL,EAAwB;AAC5C,WAAOD,GAAGE,UAAH,CAAcD,cAAd,CAAP;AACH,CAFD;AAGA,IAAME;AAAA,yDAAO,iBAAOC,MAAP,EAAeJ,EAAf,EAAmBC,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACYF,gBAAgBC,EAAhB,EAAoBC,cAApB,EAChBI,UADgB,CACL,EAAEC,KAAKF,OAAOG,EAAd,EADK,EACeH,MADf,EACuB,EAAEI,QAAQ,IAAV,EADvB,CADZ;;AAAA;AACHC,8BADG;;AAGTL,iCAASK,OAAOC,GAAP,CAAW,CAAX,CAAT;AAHS,yDAIFC,QAAQC,OAAR,CAAgBR,MAAhB,CAJE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA,GAAN;AAMA,IAAMS,UAAU,SAAVA,OAAU,CAACN,EAAD,EAAKP,EAAL,EAASC,cAAT,EAA4B;AACxC,QAAMa,QAAQ;AACVR,aAAKC;AADK,KAAd;AAGA,WAAOR,gBAAgBC,EAAhB,EAAoBC,cAApB,EACFc,OADE,CACMD,KADN,CAAP;AAEH,CAND;AAOA,IAAME,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMjB,EAAN,EAAUC,cAAV,EAA6B;AAC1C,QAAMa,QAAQ;AACVR,aAAK;AACDY,iBAAKD;AADJ;AADK,KAAd;AAKA,WAAOlB,gBAAgBC,EAAhB,EAAoBC,cAApB,EACFkB,IADE,CACGL,KADH,EAEFM,OAFE,EAAP;AAGH,CATD;AAUA,IAAMD,OAAO,SAAPA,IAAO,CAACL,KAAD,EAAQO,OAAR,EAAiBrB,EAAjB,EAAqBC,cAArB,EAAwC;AACjD,QAAMQ,SAASV,gBAAgBC,EAAhB,EAAoBC,cAApB,EACVkB,IADU,CACLL,KADK,EACE,EADF,EACMO,OADN,EAEVD,OAFU,EAAf;AAGA,WAAOX,MAAP;AACH,CALD;QAMSN,I,GAAAA,I;QAAMgB,I,GAAAA,I;QAAMpB,e,GAAAA,e;QAAiBc,O,GAAAA,O;QAASG,Q,GAAAA,Q;AAC/C","file":"BaseRepository.js","sourcesContent":["const getDbCollection = (db, collectionName) => {\n    return db.collection(collectionName);\n};\nconst save = async (entity, db, collectionName) => {\n    const result = await getDbCollection(db, collectionName)\n        .replaceOne({ _id: entity.id }, entity, { upsert: true });\n    entity = result.ops[0];\n    return Promise.resolve(entity);\n};\nconst getById = (id, db, collectionName) => {\n    const query = {\n        _id: id\n    };\n    return getDbCollection(db, collectionName)\n        .findOne(query);\n};\nconst getByIds = (ids, db, collectionName) => {\n    const query = {\n        _id: {\n            $in: ids\n        }\n    };\n    return getDbCollection(db, collectionName)\n        .find(query)\n        .toArray();\n};\nconst find = (query, options, db, collectionName) => {\n    const result = getDbCollection(db, collectionName)\n        .find(query, {}, options)\n        .toArray();\n    return result;\n};\nexport { save, find, getDbCollection, getById, getByIds };\n//# sourceMappingURL=BaseRepository.js.map"]}
{"version":3,"sources":["../dist-es6/BaseRepository.test.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","MONGO_URL","db","baseRepository","describe","beforeEach","connect","it","entity","save","getById","id","entityDb","newName"],"mappings":"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","file":"BaseRepository.test.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MongoClient } from 'mongodb';\nimport { equal, ok } from 'ptz-assert';\nimport { EntityMinBase } from 'ptz-core-domain';\nimport { BaseRepository } from './index';\nconst MONGO_URL = 'mongodb://localhost:27017/relay';\nvar db, baseRepository;\ndescribe('BaseRepository', () => {\n    beforeEach(() => __awaiter(this, void 0, void 0, function* () {\n        db = yield MongoClient.connect(MONGO_URL);\n        baseRepository = new BaseRepository(db, 'testCollection');\n    }));\n    describe('save', () => {\n        it('insert', () => __awaiter(this, void 0, void 0, function* () {\n            const entity = new EntityMinBase({});\n            yield baseRepository.save(entity);\n            const entityDb = yield baseRepository.getById(entity.id);\n            ok(entityDb);\n            equal(entityDb.id, entity.id);\n        }));\n        it('update', () => __awaiter(this, void 0, void 0, function* () {\n            let entity = new EntityMinBase({});\n            entity['name'] = 'teste';\n            yield baseRepository.save(entity);\n            const newName = 'teste2';\n            entity['name'] = newName;\n            yield baseRepository.save(entity);\n            const entityDb = yield baseRepository.getById(entity.id);\n            ok(entityDb);\n            equal(entityDb.id, entity.id);\n            equal(entityDb['name'], newName);\n        }));\n    });\n    describe('find', () => {\n        it('limit by 3');\n        it('limit by 5');\n    });\n    describe('getOtherUsersWithSameUserNameOrEmail', () => {\n        it('find by email');\n        it('find by userName');\n        it('not found');\n    });\n    describe('getByUserNameOrEmail', () => {\n        it('find by email');\n        it('find by userName');\n        it('not found');\n    });\n});\n//# sourceMappingURL=BaseRepository.test.js.map"]}
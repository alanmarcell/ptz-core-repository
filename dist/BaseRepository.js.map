{"version":3,"sources":["../dist-esnext/BaseRepository.js"],"names":["getDbCollection","curry","db","collectionName","collection","save","fnGetDbCollection","entity","replaceOne","_id","id","upsert","result","ops","Promise","resolve","getById","query","findOne","getByIds","ids","$in","find","toArray","options"],"mappings":";;;;;;;AAAA;;;;;;;;AACA,IAAMA,kBAAkB,gBAAEC,KAAF,CAAQ,UAACC,EAAD,EAAKC,cAAL,EAAwB;AACpD,WAAOD,GAAGE,UAAH,CAAcD,cAAd,CAAP;AACH,CAFuB,CAAxB;AAGA,IAAME,OAAO,gBAAEJ,KAAF;AAAA,yDAAQ,iBAAOK,iBAAP,EAA0BC,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACID,kBAChBE,UADgB,CACL,EAAEC,KAAKF,OAAOG,EAAd,EADK,EACeH,MADf,EACuB,EAAEI,QAAQ,IAAV,EADvB,CADJ;;AAAA;AACXC,8BADW;;AAGjBL,iCAASK,OAAOC,GAAP,CAAW,CAAX,CAAT;AAHiB,yDAIVC,QAAQC,OAAR,CAAgBR,MAAhB,CAJU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,IAAb;AAMA,IAAMS,UAAU,gBAAEf,KAAF,CAAQ,UAACK,iBAAD,EAAoBI,EAApB,EAA2B;AAC/C,QAAMO,QAAQ;AACVR,aAAKC;AADK,KAAd;AAGA,WAAOJ,kBACFY,OADE,CACMD,KADN,CAAP;AAEH,CANe,CAAhB;AAOA,IAAME,WAAW,gBAAElB,KAAF,CAAQ,UAACK,iBAAD,EAAoBc,GAApB,EAA4B;AACjD,QAAMH,QAAQ;AACVR,aAAK;AACDY,iBAAKD;AADJ;AADK,KAAd;AAKA,WAAOd,kBACFgB,IADE,CACGL,KADH,EAEFM,OAFE,EAAP;AAGH,CATgB,CAAjB;AAUA,IAAMD,OAAO,gBAAErB,KAAF,CAAQ,UAACK,iBAAD,EAAoBW,KAApB,EAA2BO,OAA3B,EAAuC;AACxD,QAAMZ,SAASN,kBACVgB,IADU,CACLL,KADK,EACE,EADF,EACMO,OADN,EAEVD,OAFU,EAAf;AAGA,WAAOX,MAAP;AACH,CALY,CAAb;QAMSP,I,GAAAA,I;QAAMiB,I,GAAAA,I;QAAMtB,e,GAAAA,e;QAAiBgB,O,GAAAA,O;QAASG,Q,GAAAA,Q;AAC/C","file":"BaseRepository.js","sourcesContent":["import R from 'ramda';\nconst getDbCollection = R.curry((db, collectionName) => {\n    return db.collection(collectionName);\n});\nconst save = R.curry(async (fnGetDbCollection, entity) => {\n    const result = await fnGetDbCollection\n        .replaceOne({ _id: entity.id }, entity, { upsert: true });\n    entity = result.ops[0];\n    return Promise.resolve(entity);\n});\nconst getById = R.curry((fnGetDbCollection, id) => {\n    const query = {\n        _id: id\n    };\n    return fnGetDbCollection\n        .findOne(query);\n});\nconst getByIds = R.curry((fnGetDbCollection, ids) => {\n    const query = {\n        _id: {\n            $in: ids\n        }\n    };\n    return fnGetDbCollection\n        .find(query)\n        .toArray();\n});\nconst find = R.curry((fnGetDbCollection, query, options) => {\n    const result = fnGetDbCollection\n        .find(query, {}, options)\n        .toArray();\n    return result;\n});\nexport { save, find, getDbCollection, getById, getByIds };\n//# sourceMappingURL=BaseRepository.js.map"]}
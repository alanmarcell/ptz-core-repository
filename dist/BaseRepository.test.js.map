{"version":3,"sources":["../dist-esnext/BaseRepository.test.js"],"names":["MONGO_URL","db","baseRepository","describe","beforeEach","connect","it","entity","save","getById","id","entityDb","newName","query","email","find","limit","i","testLimit","entitiesDb","length","entities","push","getByIds"],"mappings":"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","file":"BaseRepository.test.js","sourcesContent":["import { MongoClient } from 'mongodb';\nimport { equal, ok } from 'ptz-assert';\nimport { EntityMinBase } from 'ptz-core-domain';\nimport { BaseRepository } from './index';\nconst MONGO_URL = 'mongodb://localhost:27017/relay';\nvar db, baseRepository;\ndescribe('BaseRepository', () => {\n    beforeEach(async () => {\n        db = await MongoClient.connect(MONGO_URL);\n        baseRepository = new BaseRepository(db, 'testCollection');\n    });\n    describe('save', () => {\n        it('insert', async () => {\n            const entity = new EntityMinBase({});\n            await baseRepository.save(entity);\n            const entityDb = await baseRepository.getById(entity.id);\n            ok(entityDb);\n            equal(entityDb.id, entity.id);\n        });\n        it('update', async () => {\n            const entity = new EntityMinBase({});\n            entity['name'] = 'teste';\n            await baseRepository.save(entity);\n            const newName = 'teste2';\n            entity['name'] = newName;\n            await baseRepository.save(entity);\n            const entityDb = await baseRepository.getById(entity.id);\n            ok(entityDb);\n            equal(entityDb.id, entity.id);\n            equal(entityDb['name'], newName);\n        });\n    });\n    describe('find', () => {\n        it('by Email', async () => {\n            const entity = new EntityMinBase({});\n            entity['email'] = 'angeloocana@gmail.com';\n            await baseRepository.save(entity);\n            const query = {\n                email: entity['email']\n            };\n            const entityDb = await baseRepository.find(query, { limit: 1 });\n            ok(entityDb[0]);\n            equal(entityDb[0]['email'], entity['email']);\n        });\n        it('limit by 3', async () => {\n            for (let i = 0; i <= 6; i++) {\n                const entity = new EntityMinBase({});\n                entity['testLimit'] = true;\n                entity['i'] = i;\n                await baseRepository.save(entity);\n            }\n            const query = {\n                testLimit: true\n            };\n            const entitiesDb = await baseRepository.find(query, { limit: 3 });\n            equal(entitiesDb.length, 3);\n        });\n    });\n    describe('getByIds', () => {\n        it('get 3 entities by ids', async () => {\n            const entities = [];\n            for (let i = 0; i <= 6; i++) {\n                const entity = new EntityMinBase({});\n                entity['i'] = i;\n                entities.push(entity);\n                await baseRepository.save(entity);\n            }\n            const entitiesDb = await baseRepository.getByIds([\n                entities[0].id, entities[1].id, entities[2].id\n            ]);\n            equal(entitiesDb.length, 3);\n        });\n    });\n});\n//# sourceMappingURL=BaseRepository.test.js.map"]}
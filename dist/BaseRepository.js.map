{"version":3,"sources":["../dist-esnext/BaseRepository.js"],"names":["getDb","url","connect","getDbCollection","curry","db","collectionName","collection","save","entity","replaceOne","_id","id","upsert","result","ops","getById","query","findOne","getByIds","ids","$in","find","toArray","options"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AACA,IAAMA;AAAA,yDAAQ,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAqB,qBAAYC,OAAZ,CAAoBD,GAApB,CAArB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,GAAN;AACA,IAAME,kBAAkB,gBAAEC,KAAF,CAAQ,UAACC,EAAD,EAAKC,cAAL;AAAA,WAAwBD,GAAGE,UAAH,CAAcD,cAAd,CAAxB;AAAA,CAAR,CAAxB;AACA,IAAME,OAAO,gBAAEJ,KAAF;AAAA,0DAAQ,kBAAOG,UAAP,EAAmBE,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACIF,WAChBG,UADgB,CACL,EAAEC,KAAKF,OAAOG,EAAd,EADK,EACeH,MADf,EACuB,EAAEI,QAAQ,IAAV,EADvB,CADJ;;AAAA;AACXC,8BADW;;AAGjBL,iCAASK,OAAOC,GAAP,CAAW,CAAX,CAAT;AAHiB,0DAIVN,MAJU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,IAAb;AAMA,IAAMO,UAAU,gBAAEZ,KAAF,CAAQ,UAACG,UAAD,EAAaK,EAAb,EAAoB;AACxC,QAAMK,QAAQ;AACVN,aAAKC;AADK,KAAd;AAGA,WAAOL,WACFW,OADE,CACMD,KADN,CAAP;AAEH,CANe,CAAhB;AAOA,IAAME,WAAW,gBAAEf,KAAF,CAAQ,UAACG,UAAD,EAAaa,GAAb,EAAqB;AAC1C,QAAMH,QAAQ;AACVN,aAAK;AACDU,iBAAKD;AADJ;AADK,KAAd;AAKA,WAAOb,WACFe,IADE,CACGL,KADH,EAEFM,OAFE,EAAP;AAGH,CATgB,CAAjB;AAUA,IAAMD,OAAO,gBAAElB,KAAF,CAAQ,UAACG,UAAD,EAAaU,KAAb,EAAoBO,OAApB;AAAA,WAAgCjB,WAAWe,IAAX,CAAgBL,KAAhB,EAAuB,EAAvB,EAA2BO,OAA3B,EAAoCD,OAApC,EAAhC;AAAA,CAAR,CAAb;QACSf,I,GAAAA,I;QAAMc,I,GAAAA,I;QAAMtB,K,GAAAA,K;QAAOG,e,GAAAA,e;QAAiBa,O,GAAAA,O;QAASG,Q,GAAAA,Q;AACtD","file":"BaseRepository.js","sourcesContent":["import { MongoClient } from 'mongodb';\nimport R from 'ramda';\nconst getDb = async (url) => await MongoClient.connect(url);\nconst getDbCollection = R.curry((db, collectionName) => db.collection(collectionName));\nconst save = R.curry(async (collection, entity) => {\n    const result = await collection\n        .replaceOne({ _id: entity.id }, entity, { upsert: true });\n    entity = result.ops[0];\n    return entity;\n});\nconst getById = R.curry((collection, id) => {\n    const query = {\n        _id: id\n    };\n    return collection\n        .findOne(query);\n});\nconst getByIds = R.curry((collection, ids) => {\n    const query = {\n        _id: {\n            $in: ids\n        }\n    };\n    return collection\n        .find(query)\n        .toArray();\n});\nconst find = R.curry((collection, query, options) => collection.find(query, {}, options).toArray());\nexport { save, find, getDb, getDbCollection, getById, getByIds };\n//# sourceMappingURL=BaseRepository.js.map"]}
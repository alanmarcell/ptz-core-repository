{"version":3,"sources":["../dist-esnext/BaseRepository.test.js"],"names":["BaseRepository","MONGO_URL","db","describe","beforeEach","connect","it","entity","errors","id","save","getById","entityDb","newName","query","email","find","limit","i","testLimit","entitiesDb","length","entities","push","getByIds"],"mappings":"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","file":"BaseRepository.test.js","sourcesContent":["import { MongoClient } from 'mongodb';\nimport { equal, ok } from 'ptz-assert';\nimport * as BaseRepository from './index';\nconst MONGO_URL = 'mongodb://localhost:27017/relay';\nvar db;\ndescribe('BaseRepository', () => {\n    beforeEach(async () => {\n        db = await MongoClient.connect(MONGO_URL);\n    });\n    describe('save', () => {\n        it('insert', async () => {\n            const entity = {\n                errors: [],\n                id: 'testid'\n            };\n            await BaseRepository.save(entity, db, 'testConnection');\n            const entityDb = await BaseRepository.getById(entity.id, db, 'testConnection');\n            ok(entityDb);\n            equal(entityDb.id, entity.id);\n        });\n        it('update', async () => {\n            const entity = {\n                errors: [],\n                id: 'testid'\n            };\n            entity['name'] = 'teste';\n            await BaseRepository.save(entity, db, 'testConnection');\n            const newName = 'teste2';\n            entity['name'] = newName;\n            await BaseRepository.save(entity, db, 'testConnection');\n            const entityDb = await BaseRepository.getById(entity.id, db, 'testConnection');\n            ok(entityDb);\n            equal(entityDb.id, entity.id);\n            equal(entityDb['name'], newName);\n        });\n    });\n    describe('find', () => {\n        it('by Email', async () => {\n            const entity = {\n                errors: [],\n                id: 'testid'\n            };\n            entity['email'] = 'angeloocana@gmail.com';\n            await BaseRepository.save(entity, db, 'testConnection');\n            const query = {\n                email: entity['email']\n            };\n            const entityDb = await BaseRepository.find(query, { limit: 1 }, db, 'testConnection');\n            ok(entityDb[0]);\n            equal(entityDb[0]['email'], entity['email']);\n        });\n        it('limit by 3', async () => {\n            for (let i = 0; i <= 6; i++) {\n                const entity = {\n                    errors: [],\n                    id: 'test' + i\n                };\n                entity['testLimit'] = true;\n                entity['i'] = i;\n                await BaseRepository.save(entity, db, 'testConnection');\n            }\n            const query = {\n                testLimit: true\n            };\n            const entitiesDb = await BaseRepository.find(query, { limit: 3 }, db, 'testConnection');\n            equal(entitiesDb.length, 3);\n        });\n    });\n    describe('getByIds', () => {\n        it('get 3 entities by ids', async () => {\n            const entities = [];\n            for (let i = 0; i <= 6; i++) {\n                const entity = {\n                    errors: [],\n                    id: 'test' + i\n                };\n                entity['i'] = i;\n                entities.push(entity);\n                await BaseRepository.save(entity, db, 'testConnection');\n            }\n            const entitiesDb = await BaseRepository.getByIds([\n                entities[0].id, entities[1].id, entities[2].id\n            ], db, 'testConnection');\n            equal(entitiesDb.length, 3);\n        });\n    });\n});\n//# sourceMappingURL=BaseRepository.test.js.map"]}